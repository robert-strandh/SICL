
------------------------------------------------------------
Rules:
1- All submissions should be formatted following the ACM SIGS guidelines and
include ACM classification categories and terms. For more information on the
submission guidelines and the ACM keywords, see:
http://www.acm.org/sigs/publications/proceedings-templates and http://www.acm.org/about/class/1998
The conference proceedings will be referenced in the ACM Digital Library.

2- The paper should not be longer than 8 pages.

3- The pdf file should not contain any page number.

4- In the bibliography, urls should not be used unless there is a
retreive date with it. See
http://www.cs.ucy.ac.cy/~chryssis/specs/ACM-refguide.pdf

------------------------------------------------------------


----------------------- REVIEW 1 ---------------------
PAPER: 19
TITLE: A modern implementation of the LOOP macro
AUTHORS: Robert Strandh

OVERALL EVALUATION: 2 (accept)
REVIEWER'S CONFIDENCE: 5 (expert)

----------- Review -----------
GENERAL

Overall this paper seems a useful case history in a large-scale
refactoring.  I didn't see any big surprises but the presentation is
mostly clean and rrasonably well-researched, if lacking a bit in
examples that might help readers less familiar with this situation to
follow along better.

1

Criticisms could use citation.

It's confusing to have both a citation index at the end and a footnote
index. Maybe that's standard, and I just don't read enough papers
lately, but I found it confusing to know where to look since bother
are numbered. For the things where you're just going to cite urls, I
might suggest making these be endnotes rather than footnotes. Only
footnotes 7 and 8 seem to me to really be warranted as footnotes, and
these occur on different pages. If you just used daggers for these and
made the rest be numbered at the end, that might feel better to
me. I'm not asserting that's consistent with published style rules, to
which I am largely happily oblivious these days.  This comment is not
a must-do, just a note about pragmatics.

4

[When referring to less code, how do you quantify that? Numbers of
lines? Of functions? Of function calls?] Whatever the case, a concrete
indication of measure her would be good. I am assuming you actually
have the two code bases to compare.  Maybe this is the stuff in
section 5.  But mostly conclusions should restate and merely shape
points already made in the running text of the paper, not introduce
new evidence.

----------------------- REVIEW 2 ---------------------
PAPER: 19
TITLE: A modern implementation of the LOOP macro
AUTHORS: Robert Strandh

OVERALL EVALUATION: 0 (borderline paper)
REVIEWER'S CONFIDENCE: 4 (high)

----------- Review -----------

Minor Issues
------------

2.x Also, I'm not saying that Allegro or ABCL deserve special mention,
but then again, they are two notable implementations missing from this
seemingly arbitrary list of implementations.

Finally, I would either put all these past implementations in a single
subsection to save space for other discussions.


Also, while I am no specialist in the topic, a Google search for
"parser combinator error reporting" has several results, and better
search terms might reveal yet more results.
